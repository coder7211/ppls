---
---
<!-- index.astro
     Full hero "tank" with reactive water + click/tap splash particles.
     No custom cursor code — default cursor preserved.
     Safe to paste as full replacement of your current page.
-->

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>BrandRapid</title>
    <style>
      :root{
        --bg:#0f172a; --text:#e6eef6; --muted:#9fb0c8; --accent:#22c55e;
      }
      *{box-sizing:border-box}
      body{
        margin:0;
        font-family: "Futura BT", system-ui, -apple-system, "Segoe UI", Roboto, Arial, sans-serif;
        background: var(--bg);
        color: var(--text);
        -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale;
      }

      /* TANK (HERO) */
      .tank {
        position: relative;
        width:100%;
        min-height: 60vh;
        display:grid;
        place-items:center;
        padding: clamp(20px, 5vw, 48px);
        overflow: hidden;
      }

      /* Canvas covers tank */
      canvas#water {
        position:absolute;
        inset:0;
        width:100%;
        height:100%;
        z-index:1;
        display:block;
      }

      /* Text overlay above water */
      .tank-content {
        position:relative;
        z-index:3;
        text-align:center;
        max-width: 900px;
        padding: 0 1rem;
      }
      .brand {
        font-size: clamp(28px, 6.5vw, 64px);
        font-weight:800;
        margin:0 0 .08rem 0;
        color: var(--text);
      }
      .tag {
        font-size: clamp(14px, 2.5vw, 20px);
        color: var(--muted);
        margin: 0 0 1rem 0;
      }
      .mission {
        color: var(--muted);
        max-width:60ch;
        margin: 0 auto;
        font-size: clamp(14px, 2vw, 18px);
        line-height:1.6;
      }

      /* subtle frame / glow */
      .tank::before, .tank::after{
        content:"";
        position:absolute;
        left:0; right:0;
        pointer-events:none;
      }
      .tank::before{ top:0; height:10px; background: linear-gradient(180deg, rgba(255,255,255,0.08), rgba(255,255,255,0)); }
      .tank::after{ bottom:0; height:10px; background: linear-gradient(0deg, rgba(255,255,255,0.06), rgba(255,255,255,0)); }

      /* Divider */
      .divider{
        width: min(92%, 1000px);
        height:1px;
        margin: 36px auto;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.08), transparent);
      }

      /* CONTACT CARD */
      .contact-wrap{
        width: min(92%, 1000px);
        margin: 0 auto 80px;
        padding: clamp(20px, 4vw, 40px);
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.06);
        border-radius: 14px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.28);
        backdrop-filter: blur(6px);
      }
      .contact-wrap h2{ margin:0 0 .5rem 0; font-size: clamp(20px, 3.2vw, 28px); }
      .contact-wrap p.lead { color: var(--muted); margin:0 0 1rem 0; }

      form { display:grid; gap:12px; }
      input, textarea{
        padding:12px 14px; border-radius:10px; border:1px solid rgba(255,255,255,0.08);
        background: rgba(255,255,255,0.02); color: var(--text); outline:none;
      }
      textarea{ min-height:120px; resize:vertical; }
      button{
        padding:12px 16px; border-radius:10px; border:none;
        background: var(--accent); color: #041017; font-weight:700; cursor:pointer;
      }

      /* Responsive form layout on wider screens */
      @media (min-width: 720px){
        form{ grid-template-columns: 1fr 1fr; }
        textarea{ grid-column: 1 / -1; }
        button{ grid-column: 1 / -1; justify-self: start; min-width: 180px; }
      }
    </style>
  </head>

  <body>
    <!-- HERO / TANK -->
    <section id="tank" class="tank" aria-label="Interactive water tank">
      <canvas id="water" aria-hidden="true"></canvas>

      <div class="tank-content" aria-label="Brand intro">
        <h1 class="brand">BrandRapid</h1>
        <h2 class="tag">Marketing</h2>
        <p class="mission">
          BrandRapid is a forward-thinking digital marketing agency that elevates brands using innovative advertising solutions, committed to driving growth and engagement for every client.
        </p>
      </div>
    </section>

    <!-- Divider -->
    <div class="divider" role="separator" aria-hidden="true"></div>

    <!-- CONTACT (Netlify form) -->
    <section class="contact-wrap" id="contact">
      <h2>Contact Us</h2>
      <p class="lead">We’d love to hear from you. Fill out the form and we’ll get back to you shortly.</p>
      <form name="contact" method="POST" data-netlify="true">
        <input type="hidden" name="form-name" value="contact" />
        <input name="name" type="text" placeholder="Your Name" required />
        <input name="email" type="email" placeholder="Your Email" required />
        <textarea name="message" placeholder="Your Message" required></textarea>
        <button type="submit">Send Message</button>
      </form>
    </section>

    <script>
      // ===== Water canvas with click/tap splash + particles (no custom cursor) =====
      (function(){
        const canvas = document.getElementById('water');
        const ctx = canvas.getContext('2d', { alpha: true });

        const tank = document.getElementById('tank');

        let DPR = Math.max(1, window.devicePixelRatio || 1);
        let W = 0, H = 0;
        let last = performance.now();
        let time = 0;

        // Wave / water settings
        const baseFill = 0.25; // bottom 25% filled
        let mouseX = null;
        let mouseInside = false;
        const particles = [];

        // Resize canvas to tank size
        function resize(){
          const rect = tank.getBoundingClientRect();
          W = Math.max(320, Math.floor(rect.width));
          H = Math.max(260, Math.floor(rect.height));
          canvas.width  = Math.floor(W * DPR);
          canvas.height = Math.floor(H * DPR);
          canvas.style.width  = W + 'px';
          canvas.style.height = H + 'px';
          ctx.setTransform(DPR,0,0,DPR,0,0);
        }

        // Wave surface function
        function waveY(xNorm, t){
          const waterLevel = 1 - baseFill;
          const y =
            waterLevel
            + 0.02 * Math.sin(xNorm * Math.PI * 2.0 + t * 0.8)
            + 0.012 * Math.sin(xNorm * Math.PI * 3.8 - t * 1.1);

          // local bump when clicking (gaussian)
          if(mouseInside && mouseX != null){
            const mx = mouseX / W;
            const d = xNorm - mx;
            const sigma = 0.08;
            const gauss = Math.exp(-(d*d)/(2*sigma*sigma));
            const bump = gauss * 0.04 * Math.sin(t * 3.2);
            return y - bump;
          }
          return y;
        }

        // Particle for splash droplets
        function createParticle(x, y){
          const angle = (Math.random() * Math.PI) - Math.PI/2 - 0.25;
          const speed = 1.6 + Math.random() * 2.4;
          const vx = Math.cos(angle) * speed;
          const vy = Math.sin(angle) * speed * -1.0;
          const life = 700 + Math.random()*700;
          const size = 1.5 + Math.random()*3.5;
          particles.push({ x, y, vx, vy, life, born: performance.now(), size, alpha: 1 });
        }

        // Trigger splash (ripples handled via mouse bump + particles)
        function triggerSplash(clientX, clientY){
          const rect = tank.getBoundingClientRect();
          const x = clientX - rect.left;
          const y = clientY - rect.top;
          const count = 8 + Math.floor(Math.random() * 10);
          for(let i=0;i<count;i++) createParticle(x, y);

          // brief bump influence on waves
          mouseX = x;
          mouseInside = true;
          setTimeout(()=> { mouseInside = false; mouseX = null; }, 600);
        }

        // Main draw loop
        function draw(now){
          const dt = now - last;
          last = now;
          time = now * 0.001;

          ctx.clearRect(0,0,W,H);

          // surface path (top edge of water)
          ctx.beginPath();
          const steps = Math.max(120, Math.floor(W / 6));
          for(let i=0;i<=steps;i++){
            const x = (i/steps) * W;
            const yNorm = waveY(i/steps, time);
            const y = yNorm * H;
            if(i===0) ctx.moveTo(x, y);
            else ctx.lineTo(x, y);
          }
          ctx.lineTo(W, H);
          ctx.lineTo(0, H);
          ctx.closePath();

          // fill gradient
          const g = ctx.createLinearGradient(0, H*0.4, 0, H);
          g.addColorStop(0, 'rgba(56,189,248,0.86)');
          g.addColorStop(0.6, 'rgba(14,165,233,0.88)');
          g.addColorStop(1, 'rgba(2,132,199,0.95)');
          ctx.fillStyle = g;
          ctx.fill();

          // light sheen stroke
          ctx.save();
          ctx.globalAlpha = 0.18;
          ctx.strokeStyle = 'rgba(255,255,255,0.9)';
          ctx.lineWidth = 1.2;
          ctx.beginPath();
          for(let i=0;i<=steps;i++){
            const x = (i/steps) * W;
            const yNorm = waveY(i/steps, time) - 0.006;
            const y = yNorm * H;
            if(i===0) ctx.moveTo(x,y);
            else ctx.lineTo(x,y);
          }
          ctx.stroke();
          ctx.restore();

          // update & draw particles (droplets)
          const nowMs = performance.now();
          for(let i = particles.length -1; i >= 0; i--){
            const p = particles[i];
            const age = nowMs - p.born;
            if(age >= p.life || p.alpha <= 0.02){
              particles.splice(i,1);
              continue;
            }
            // physics
            p.vy += 0.045 * (dt/16);
            p.x += p.vx * (dt/16) * 0.9;
            p.y += p.vy * (dt/16) * 0.9;
            p.alpha = 1 - (age / p.life);

            // draw droplet
            ctx.save();
            ctx.globalAlpha = p.alpha;
            ctx.fillStyle = 'rgba(255,255,255,0.95)';
            ctx.beginPath();
            ctx.ellipse(p.x, p.y, p.size, p.size*0.7, 0, 0, Math.PI*2);
            ctx.fill();
            ctx.restore();
          }

          requestAnimationFrame(draw);
        }

        // Pointer handlers
        function onPointerMove(e){
          const rect = tank.getBoundingClientRect();
          const clientX = e.touches ? e.touches[0].clientX : e.clientX;
          mouseX = clientX - rect.left;
          mouseInside = true;
        }
        function onPointerEnter(){ mouseInside = true; }
        function onPointerLeave(){ mouseInside = false; mouseX = null; }

        function onPointerDown(e){
          const clientX = e.touches ? e.touches[0].clientX : e.clientX;
          const clientY = e.touches ? e.touches[0].clientY : e.clientY;
          triggerSplash(clientX, clientY);
        }

        // events
        tank.addEventListener('mousemove', onPointerMove, { passive:true });
        tank.addEventListener('touchmove', onPointerMove, { passive:true });
        tank.addEventListener('mouseenter', onPointerEnter, { passive:true });
        tank.addEventListener('mouseleave', onPointerLeave, { passive:true });
        tank.addEventListener('mousedown', onPointerDown, { passive:true });
        tank.addEventListener('touchstart', function(e){ onPointerDown(e); }, { passive:true });

        window.addEventListener('resize', resize, { passive:true });

        // init
        resize();
        requestAnimationFrame(draw);
      })();
    </script>
  </body>
</html>
